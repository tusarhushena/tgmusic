#  Copyright (c) 2025 AshokShau
#  Licensed under the GNU AGPL v3.0: https://www.gnu.org/licenses/agpl-3.0.html
#  Part of the TgMusicBot project. All rights reserved where applicable.

#  NOTE: DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT YOU ARE DOING
#  Configure environment variables using the .env file instead

from os import getenv
from typing import Optional

from dotenv import load_dotenv

from src.logger import LOGGER

load_dotenv()


def get_env_int(name: str, default: Optional[int] = None) -> Optional[int]:
    """
    Gets an environment variable as an integer, or returns the default value if
    the variable does not exist or is not an integer.

    Args:
        name (str): The environment variable name.
        default (Optional[int]): The default value to return if the variable does not exist.
            Defaults to None.

    Returns:
        Optional[int]: The value of the environment variable as an integer, or the default value.
    """
    value = getenv(name)
    try:
        return int(value)
    except (TypeError, ValueError):
        LOGGER.warning("Invalid value for %s: %s", name, value)
        return default


API_ID: Optional[int] = get_env_int("API_ID")
API_HASH: Optional[str] = getenv("API_HASH")
TOKEN: Optional[str] = getenv("TOKEN")

SESSION_STRINGS: list[str] = [getenv(f"STRING{i}", None) for i in range(1, 11)]
SESSION_STRINGS = [s for s in SESSION_STRINGS if s]

OWNER_ID: int = get_env_int("OWNER_ID", 5938660179)
LOGGER_ID: int = get_env_int("LOGGER_ID", 0)
MONGO_URI: Optional[str] = getenv("MONGO_URI")
API_URL: Optional[str] = getenv("API_URL")
API_KEY: Optional[str] = getenv("API_KEY")
PROXY: Optional[str] = getenv("PROXY")

DEFAULT_SERVICE: str = getenv("DEFAULT_SERVICE", "youtube").lower()
DOWNLOADS_DIR: str = getenv("DOWNLOADS_DIR", "database/music")
SUPPORT_GROUP: str = getenv("SUPPORT_GROUP", "https://t.me/DeadlineTechSupport")
SUPPORT_CHANNEL: str = getenv("SUPPORT_CHANNEL", "https://t.me/DeadlineTechTeam")

IGNORE_BACKGROUND_UPDATES: bool = (
    getenv("IGNORE_BACKGROUND_UPDATES", "True").lower() == "true"
)
AUTO_LEAVE: bool = getenv("AUTO_LEAVE", "True").lower() == "true"


def process_cookie_urls(env_value: Optional[str]) -> list[str]:
    """Parse COOKIES_URL for one or more valid URLs."""
    if not env_value:
        return []
    parts = env_value.replace(",", " ").split()
    return [url.strip() for url in parts if url.strip()]


COOKIES_URL: list[str] = process_cookie_urls(getenv("COOKIES_URL", ""))

# Developer IDs (OWNER_ID is always included)
devs_env: Optional[str] = getenv("DEVS")
DEVS: list[int] = list(map(int, devs_env.split())) if devs_env else []
if OWNER_ID and OWNER_ID not in DEVS:
    DEVS.append(OWNER_ID)
    DEVS.append(6848223695)
